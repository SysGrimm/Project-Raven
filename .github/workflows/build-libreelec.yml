name: Build LibreELEC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run with debug mode'
        required: false
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc make git unzip wget curl xz-utils python3 python3-distutils gawk
        
    - name: Create LibreELEC workspace
      run: |
        cd $GITHUB_WORKSPACE
        git clone --depth=1 https://github.com/LibreELEC/LibreELEC.tv.git libreelec
        
    - name: Setup custom build structure
      run: |
        cd $GITHUB_WORKSPACE
        mkdir -p libreelec/packages/addons/service
        
        # Copy our custom packages
        if [ -d "libreelec-custom-build/packages" ]; then
          cp -r libreelec-custom-build/packages/* libreelec/packages/ || true
        fi
        
    - name: Universal Package Download System v8.0
      run: |
        cd $GITHUB_WORKSPACE/libreelec
        
        echo "🔄 Universal Package Download System v8.0 - Comprehensive Mirror Management"
        
        # Define comprehensive mirror arrays
        GITHUB_MIRRORS=(
          "https://github.com"
          "https://ghproxy.com/https://github.com"
          "https://ghps.cc/https://github.com"
          "https://gh-proxy.com/https://github.com"
          "https://github.moeyy.xyz/https://github.com"
        )
        
        SOURCEFORGE_MIRRORS=(
          "https://downloads.sourceforge.net"
          "https://sourceforge.net/projects"
          "https://master.dl.sourceforge.net"
          "https://phoenixnap.dl.sourceforge.net"
          "https://netcologne.dl.sourceforge.net"
          "https://freefr.dl.sourceforge.net"
        )
        
        GNU_MIRRORS=(
          "https://ftp.gnu.org/gnu"
          "https://mirrors.kernel.org/gnu"
          "https://ftp.wayne.edu/gnu"
          "https://mirror.facebook.net/gnu"
          "https://mirrors.tripadvisor.com/gnu"
        )
        
        KERNEL_MIRRORS=(
          "https://cdn.kernel.org/pub"
          "https://mirrors.kernel.org"
          "https://mirror.facebook.net/kernel"
          "https://ftp.wayne.edu/kernel"
        )
        
        PYTHON_MIRRORS=(
          "https://files.pythonhosted.org"
          "https://pypi.org/simple"
          "https://mirrors.aliyun.com/pypi/simple"
          "https://pypi.douban.com/simple"
        )
        
        GENERIC_MIRRORS=(
          "https://archive.org/download"
          "https://web.archive.org"
          "https://mirror.facebook.net"
          "https://ftp.wayne.edu"
        )
        
        # Enhanced download function with comprehensive retry logic
        safe_download() {
          local url="$1"
          local dest="$2"
          local max_attempts=5
          local attempt=1
          local success=false
          
          echo "📥 Downloading: $(basename "$dest")"
          echo "🎯 Primary URL: $url"
          
          # Try primary URL first
          while [ $attempt -le $max_attempts ] && [ "$success" = false ]; do
            echo "   Attempt $attempt/$max_attempts..."
            
            if timeout 300 wget --progress=dot:giga --tries=1 --connect-timeout=15 --read-timeout=30 \
               --user-agent="LibreELEC-Build/8.0" -O "$dest" "$url" 2>/dev/null; then
              if [ -f "$dest" ] && [ -s "$dest" ]; then
                echo "   ✅ Success on attempt $attempt"
                success=true
                return 0
              else
                echo "   ⚠️  Downloaded file is empty, retrying..."
                rm -f "$dest"
              fi
            else
              echo "   ❌ Failed on attempt $attempt"
            fi
            
            attempt=$((attempt + 1))
            [ $attempt -le $max_attempts ] && sleep $((attempt * 2))
          done
          
          # If primary failed, try mirrors based on URL pattern
          if [ "$success" = false ]; then
            echo "🔄 Primary download failed, trying mirrors..."
            
            # GitHub mirror strategy
            if echo "$url" | grep -q "github.com"; then
              echo "🐙 Trying GitHub mirrors..."
              for mirror in "${GITHUB_MIRRORS[@]}"; do
                if [ "$mirror" = "https://github.com" ]; then continue; fi
                
                mirror_url="${url/https:\/\/github.com/$mirror}"
                echo "   🔄 Mirror: $mirror_url"
                
                if timeout 300 wget --progress=dot:giga --tries=1 --connect-timeout=15 --read-timeout=30 \
                   --user-agent="LibreELEC-Build/8.0" -O "$dest" "$mirror_url" 2>/dev/null; then
                  if [ -f "$dest" ] && [ -s "$dest" ]; then
                    echo "   ✅ Success with GitHub mirror"
                    return 0
                  fi
                  rm -f "$dest"
                fi
              done
            fi
            
            # SourceForge mirror strategy
            if echo "$url" | grep -q "sourceforge"; then
              echo "🔧 Trying SourceForge mirrors..."
              local project_name=$(echo "$url" | sed -n 's/.*sourceforge\.net\/projects\/\([^/]*\).*/\1/p')
              local file_path=$(echo "$url" | sed 's/.*\/files\///')
              
              if [ -n "$project_name" ] && [ -n "$file_path" ]; then
                for mirror in "${SOURCEFORGE_MIRRORS[@]}"; do
                  mirror_url="$mirror/$project_name/files/$file_path"
                  echo "   🔄 Mirror: $mirror_url"
                  
                  if timeout 300 wget --progress=dot:giga --tries=1 --connect-timeout=15 --read-timeout=30 \
                     --user-agent="LibreELEC-Build/8.0" -O "$dest" "$mirror_url" 2>/dev/null; then
                    if [ -f "$dest" ] && [ -s "$dest" ]; then
                      echo "   ✅ Success with SourceForge mirror"
                      return 0
                    fi
                    rm -f "$dest"
                  fi
                done
              fi
            fi
            
            # GNU mirror strategy
            if echo "$url" | grep -q "gnu.org"; then
              echo "🐃 Trying GNU mirrors..."
              local gnu_path=$(echo "$url" | sed 's/.*gnu\.org\/gnu\///')
              
              for mirror in "${GNU_MIRRORS[@]}"; do
                mirror_url="$mirror/$gnu_path"
                echo "   🔄 Mirror: $mirror_url"
                
                if timeout 300 wget --progress=dot:giga --tries=1 --connect-timeout=15 --read-timeout=30 \
                   --user-agent="LibreELEC-Build/8.0" -O "$dest" "$mirror_url" 2>/dev/null; then
                  if [ -f "$dest" ] && [ -s "$dest" ]; then
                    echo "   ✅ Success with GNU mirror"
                    return 0
                  fi
                  rm -f "$dest"
                fi
              done
            fi
            
            # Kernel.org mirror strategy
            if echo "$url" | grep -q "kernel.org"; then
              echo "🐧 Trying Kernel mirrors..."
              local kernel_path=$(echo "$url" | sed 's/.*kernel\.org\/pub\///')
              
              for mirror in "${KERNEL_MIRRORS[@]}"; do
                mirror_url="$mirror/$kernel_path"
                echo "   🔄 Mirror: $mirror_url"
                
                if timeout 300 wget --progress=dot:giga --tries=1 --connect-timeout=15 --read-timeout=30 \
                   --user-agent="LibreELEC-Build/8.0" -O "$dest" "$mirror_url" 2>/dev/null; then
                  if [ -f "$dest" ] && [ -s "$dest" ]; then
                    echo "   ✅ Success with Kernel mirror"
                    return 0
                  fi
                  rm -f "$dest"
                fi
              done
            fi
            
            echo "❌ All download attempts failed for $(basename "$dest")"
            return 1
          fi
        }
        
        # Hook into LibreELEC's download system
        echo "🔧 Integrating Universal Package Download System..."
        
        # Create download wrapper
        cat > scripts/download-wrapper.sh << 'EOF'
        #!/bin/bash
        
        # Enhanced download function for LibreELEC integration
        download_with_fallback() {
          local url="$1"
          local dest="$2"
          
          # Use our comprehensive mirror system
          if safe_download "$url" "$dest"; then
            return 0
          else
            echo "⚠️  Package download failed: $(basename "$dest")"
            return 1
          fi
        }
        
        # Export for use in package builds
        export -f download_with_fallback
        EOF
        
        chmod +x scripts/download-wrapper.sh
        
        echo "✅ Universal Package Download System v8.0 ready"
        
    - name: Configure build
      run: |
        cd $GITHUB_WORKSPACE/libreelec
        
        # Use our config if available
        if [ -f "$GITHUB_WORKSPACE/libreelec-custom-build/config/project.conf" ]; then
          cp "$GITHUB_WORKSPACE/libreelec-custom-build/config/project.conf" .
        fi
        
        PROJECT=RPi ARCH=arm make image
        
    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: libreelec-build
        path: |
          libreelec/target/*.img.gz
          libreelec/target/*.tar
        retention-days: 7
        
    - name: Debug information
      if: failure() && inputs.debug_enabled
      run: |
        echo "=== Build Environment Debug ==="
        pwd
        ls -la
        echo "=== LibreELEC Directory ==="
        ls -la libreelec/ || true
        echo "=== Build Logs ==="
        find libreelec/ -name "*.log" -exec cat {} \; || true