name: Build Custom LibreELEC Image

on:
  push:
    branches: [ main ]
    paths: 
      - '.github/workflows/build-libreelec.yml'
      - 'libreelec-custom-build/**'
      - 'libreelec-tailscale-addon/**'
  workflow_dispatch:
    inputs:
      device:
        description: 'Target device (RPi4, RPi5, Generic)'
        required: false
        default: 'RPi4'
        type: choice
        options:
          - RPi4
          - RPi5
          - Generic
      force_clean:
        description: 'Force clean build'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-libreelec

jobs:
  build-libreelec:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours timeout for LibreELEC build
    strategy:
      matrix:
        device: [RPi5]  # Temporarily build only RPi5 to speed up testing
        include:
          - device: RPi5
            project: RPi
            arch: arm
            full_name: "Raspberry Pi 5"
            libreelec_device: "RPi5"
    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install additional build dependencies
        run: |
          # Install more comprehensive math library dependencies
          sudo apt update
          sudo apt install -y \
            libgmp-dev \
            libmpfr-dev \
            libmpc-dev \
            texinfo \
            flex \
            help2man \
            gawk \
            wget \
            libtool-bin \
            autotools-dev \
            automake \
            pkg-config \
            libssl-dev \
            libncurses5-dev \
            unzip \
            gperf \
            build-essential \
            bison \
            gettext \
            xfonts-utils \
            rdfind \
            libparse-yapp-perl \
            xsltproc \
            libxml-parser-perl \
            patchutils \
            lzop

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: libreelec-${{ matrix.device }}-${{ github.sha }}

      - name: Pre-download critical dependencies
        run: |
          # Create sources directory for LibreELEC
          mkdir -p /home/runner/work/Project-Raven/Project-Raven/libreelec-custom-build/LibreELEC.tv/sources
          cd /home/runner/work/Project-Raven/Project-Raven/libreelec-custom-build/LibreELEC.tv/sources
          
          # Download GMP from alternative mirrors
          echo "Downloading GMP from alternative sources..."
          wget -c -T 30 -t 3 "https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz" || \
          wget -c -T 30 -t 3 "https://mirrors.kernel.org/gnu/gmp/gmp-6.3.0.tar.xz" || \
          wget -c -T 30 -t 3 "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.xz" || \
          echo "Warning: Could not pre-download GMP, build will try original sources"
          
          # Download other potentially problematic dependencies
          echo "Pre-downloading other critical dependencies..."
          wget -c -T 30 -t 3 "https://ftp.gnu.org/gnu/mpfr/mpfr-4.2.1.tar.xz" || echo "MPFR pre-download failed"
          wget -c -T 30 -t 3 "https://ftp.gnu.org/gnu/mpc/mpc-1.3.1.tar.gz" || echo "MPC pre-download failed"
          
          # List downloaded files
          echo "Pre-downloaded dependencies:"
          ls -la

      - name: Clone LibreELEC source
        run: |
          # Ensure the directory exists and is accessible
          ls -la libreelec-custom-build/
          cd libreelec-custom-build
          
          # Remove any incomplete clone and start fresh
          if [ -d "LibreELEC.tv" ]; then
            echo "Removing incomplete LibreELEC.tv directory..."
            rm -rf LibreELEC.tv
          fi
          
          echo "Cloning LibreELEC source..."
          git clone --depth 1 --branch libreelec-12.0 \
            https://github.com/LibreELEC/LibreELEC.tv.git
          
          echo "LibreELEC directory contents:"
          ls -la LibreELEC.tv/
          
          echo "Checking for essential directories:"
          ls -la LibreELEC.tv/scripts/ || echo "Warning: scripts directory not found"
          ls -la LibreELEC.tv/packages/ || echo "Warning: packages directory not found"

      - name: Apply download reliability patches
        run: |
          cd libreelec-custom-build/LibreELEC.tv
          
          # Configure wget to be more resilient to network issues
          echo "timeout = 30" > ~/.wgetrc
          echo "tries = 5" >> ~/.wgetrc
          echo "retry_connrefused = on" >> ~/.wgetrc
          echo "waitretry = 3" >> ~/.wgetrc
          
          # Verify scripts directory exists before patching
          if [ -d "scripts/" ]; then
            echo "Applying network timeout and retry patches to scripts..."
            # Apply network timeout and retry patches to scripts
            find scripts/ -name "get" -type f -exec sed -i.bak \
              's/wget /wget --timeout=30 --tries=5 --retry-connrefused --waitretry=3 /g' {} \;
            echo "Download reliability patches applied to get scripts"
          else
            echo "Warning: scripts directory not found, skipping get script patches"
          fi
          
          # Check for and patch any Makefile downloads
          if [ -f "Makefile" ]; then
            echo "Patching Makefile for download reliability..."
            sed -i.bak 's/wget /wget --timeout=30 --tries=5 --retry-connrefused --waitretry=3 /g' Makefile || true
          fi
          
          echo "Download reliability configuration completed"

      - name: Copy custom packages
        run: |
          cd libreelec-custom-build
          
          echo "Copying Tailscale add-on..."
          # Copy Tailscale add-on
          mkdir -p LibreELEC.tv/packages/addons/service/tailscale
          cp -r ../libreelec-tailscale-addon/* LibreELEC.tv/packages/addons/service/tailscale/
          
          echo "Tailscale add-on copied:"
          ls -la LibreELEC.tv/packages/addons/service/tailscale/
          
          # Copy other custom packages
          if [ -d "packages" ]; then
            echo "Copying additional custom packages..."
            cp -r packages/* LibreELEC.tv/packages/
          else
            echo "No additional packages directory found"
          fi

      - name: Configure build
        run: |
          cd libreelec-custom-build/LibreELEC.tv
          echo "Setting up LibreELEC build for ${{ matrix.full_name }}"
          echo "PROJECT=${{ matrix.project }}, DEVICE=${{ matrix.libreelec_device }}, ARCH=${{ matrix.arch }}"

      - name: Pre-download sources to avoid build failures
        run: |
          set -e
          echo "Pre-downloading common source packages that might fail during build..."
          
          # Create sources directory if it doesn't exist
          sudo mkdir -p /tmp/sources
          
          # Pre-download gettext from multiple GNU mirrors
          echo "Downloading gettext..."
          for url in \
            "https://ftp.gnu.org/gnu/gettext/gettext-0.21.tar.xz" \
            "https://ftpmirror.gnu.org/gettext/gettext-0.21.tar.xz" \
            "https://mirror.koddos.net/gnu/gettext/gettext-0.21.tar.xz" \
            "https://mirrors.kernel.org/gnu/gettext/gettext-0.21.tar.xz" \
            "https://mirror.us-midwest-1.nexcess.net/gnu/gettext/gettext-0.21.tar.xz"
          do
            if wget --timeout=30 --tries=2 -O /tmp/sources/gettext-0.21.tar.xz "$url" 2>/dev/null; then
              echo "Successfully downloaded gettext from $url"
              break
            else
              echo "Failed to download from $url, trying next mirror..."
            fi
          done
          
          # Pre-download GMP (GNU Multiple Precision Arithmetic Library)
          echo "Downloading GMP..."
          for url in \
            "https://gmplib.org/download/gmp/gmp-6.3.0.tar.xz" \
            "https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz" \
            "https://ftpmirror.gnu.org/gmp/gmp-6.3.0.tar.xz" \
            "https://mirror.koddos.net/gnu/gmp/gmp-6.3.0.tar.xz" \
            "https://mirrors.kernel.org/gnu/gmp/gmp-6.3.0.tar.xz" \
            "https://archive.archlinux.org/packages/g/gmp/gmp-6.3.0-1-x86_64.pkg.tar.zst"
          do
            if wget --timeout=30 --tries=2 -O /tmp/sources/gmp-6.3.0.tar.xz "$url" 2>/dev/null; then
              echo "Successfully downloaded GMP from $url"
              break
            else
              echo "Failed to download from $url, trying next mirror..."
            fi
          done
          
          # Pre-download other commonly problematic packages
          echo "Downloading MPFR..."
          for url in \
            "https://www.mpfr.org/mpfr-current/mpfr-4.2.1.tar.xz" \
            "https://ftp.gnu.org/gnu/mpfr/mpfr-4.2.1.tar.xz" \
            "https://ftpmirror.gnu.org/mpfr/mpfr-4.2.1.tar.xz"
          do
            if wget --timeout=30 --tries=2 -O /tmp/sources/mpfr-4.2.1.tar.xz "$url" 2>/dev/null; then
              echo "Successfully downloaded MPFR from $url"
              break
            else
              echo "Failed to download from $url, trying next mirror..."
            fi
          done
          
          echo "Downloading MPC..."
          for url in \
            "https://ftp.gnu.org/gnu/mpc/mpc-1.3.1.tar.gz" \
            "https://ftpmirror.gnu.org/mpc/mpc-1.3.1.tar.gz" \
            "https://mirror.koddos.net/gnu/mpc/mpc-1.3.1.tar.gz"
          do
            if wget --timeout=30 --tries=2 -O /tmp/sources/mpc-1.3.1.tar.gz "$url" 2>/dev/null; then
              echo "Successfully downloaded MPC from $url"
              break
            else
              echo "Failed to download from $url, trying next mirror..."
            fi
          done
          
          # List what we successfully downloaded
          echo "Pre-downloaded files:"
          ls -la /tmp/sources/ || echo "No sources downloaded"
          echo "Verifying downloaded files exist and have content:"
          for file in /tmp/sources/*; do
            if [ -f "$file" ]; then
              echo "$(basename "$file"): $(ls -lh "$file" | awk '{print $5}')"
            fi
          done

      - name: Build LibreELEC image
        timeout-minutes: 180
        run: |
          cd libreelec-custom-build/LibreELEC.tv
          export CCACHE_DIR="${{ github.workspace }}/.ccache"
          
          # Set up environment for source cache
          export SOURCES_CACHE="/tmp/sources"
          
          # Create LibreELEC sources directory and copy our pre-downloaded files
          mkdir -p sources
          if [ -f "/home/runner/work/Project-Raven/Project-Raven/libreelec-custom-build/LibreELEC.tv/sources/gmp-6.3.0.tar.xz" ]; then
            echo "Copying pre-downloaded GMP to LibreELEC sources directory..."
            cp -v "/home/runner/work/Project-Raven/Project-Raven/libreelec-custom-build/LibreELEC.tv/sources/"*.tar.* sources/ 2>/dev/null || echo "No pre-downloaded sources to copy"
            ls -la sources/
          fi
          
          echo "Current directory: $(pwd)"
          echo "Available LibreELEC projects:"
          ls -la projects/
          
          if [ "${{ github.event.inputs.force_clean }}" = "true" ]; then
            make clean
          fi
          
          echo "Starting LibreELEC build for ${{ matrix.full_name }}"
          echo "Build command: make PROJECT=${{ matrix.project }} DEVICE=${{ matrix.libreelec_device }} ARCH=${{ matrix.arch }} image"
          
          # Set timeout for wget operations to prevent hanging
          export WGET_OPTIONS="--timeout=30 --tries=3"
          
          # Add alternative GNU mirrors to help with download issues
          export GNU_MIRROR_LIST="https://ftp.gnu.org/gnu https://mirrors.kernel.org/gnu https://ftpmirror.gnu.org"
          
          # Optimize build performance
          export MAKEFLAGS="-j$(nproc)"
          export NINJA_STATUS="[%f/%t] "
          export CCACHE_COMPRESS=1
          export CCACHE_MAXSIZE=2G
          
          # Set environment variables for robust network downloads
          export HTTP_TIMEOUT=60
          export WGET_TIMEOUT=60
          export CURL_TIMEOUT=60
          
          # Try to use pre-downloaded sources by creating symbolic links
          if [ -f "sources/gmp-6.3.0.tar.xz" ]; then
            echo "Using pre-downloaded GMP source"
            # Create build cache directory structure
            mkdir -p build.LibreELEC-${{ matrix.libreelec_device }}.${{ matrix.arch }}-12.0-devel/gmp-6.3.0/
          fi
          
          # Build for the specific device with parallel jobs and robust error handling
          set -e  # Exit on any error
          echo "Starting LibreELEC build with enhanced error handling..."
          
          # Run the build with timeout and retry logic
          for attempt in 1 2 3; do
            echo "Build attempt $attempt of 3"
            if timeout 3600 make -j$(nproc) PROJECT=${{ matrix.project }} DEVICE=${{ matrix.libreelec_device }} ARCH=${{ matrix.arch }} image; then
              echo "Build completed successfully on attempt $attempt"
              break
            else
              exit_code=$?
              echo "Build attempt $attempt failed with exit code $exit_code"
              if [ $attempt -eq 3 ]; then
                echo "All build attempts failed"
                exit $exit_code
              else
                echo "Retrying build in 30 seconds..."
                sleep 30
              fi
            fi
          done

      - name: Prepare release artifacts
        run: |
          cd libreelec-custom-build/LibreELEC.tv
          mkdir -p ../../release-artifacts
          
          # Find the built image
          IMAGE_FILE=$(find target -name "*.img.gz" | head -1)
          if [ -n "$IMAGE_FILE" ]; then
            RELEASE_NAME="LibreELEC-${{ matrix.project }}.${{ matrix.libreelec_device }}-raven-$(date +%Y%m%d).img.gz"
            cp "$IMAGE_FILE" "../../release-artifacts/$RELEASE_NAME"
            
            # Generate checksums
            cd ../../release-artifacts
            sha256sum "$RELEASE_NAME" > "$RELEASE_NAME.sha256"
            
            echo "Built image: $RELEASE_NAME"
            echo "Size: $(du -h $RELEASE_NAME | cut -f1)"
          else
            echo "No image file found!"
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libreelec-${{ matrix.device }}-image
          path: release-artifacts/*
          retention-days: 30

      - name: Create release info
        run: |
          cd release-artifacts
          cat > release-info-${{ matrix.device }}.md << EOF
          ## LibreELEC Project-Raven Build - ${{ matrix.full_name }}
          
          **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Target Device**: ${{ matrix.full_name }}
          **LibreELEC Version**: 12.x
          **Project-Raven Version**: 2.0
          
          ### Features Included
          - Tailscale VPN service add-on
          - Jellyfin for Kodi integration
          - Copacetic theme (modern UI)
          - Setup wizard for first-boot configuration
          - CEC remote control support
          - Hardware acceleration optimizations
          
          ### Installation
          1. Download the .img.gz file
          2. Flash to 8GB+ microSD card using Raspberry Pi Imager
          3. Insert SD card into ${{ matrix.full_name }}
          4. Connect HDMI to TV and network cable
          5. Power on and follow setup wizard
          
          ### Verification
          \`\`\`bash
          # Verify download integrity
          sha256sum -c *.sha256
          \`\`\`
          
          ### Support
          - Documentation: [Project-Raven Wiki](https://github.com/SysGrimm/Project-Raven/wiki)
          - Issues: [GitHub Issues](https://github.com/SysGrimm/Project-Raven/issues)
          - Discussions: [GitHub Discussions](https://github.com/SysGrimm/Project-Raven/discussions)
          EOF

      - name: Upload release info
        uses: actions/upload-artifact@v4
        with:
          name: release-info-${{ matrix.device }}
          path: release-artifacts/release-info-${{ matrix.device }}.md

  create-release:
    needs: build-libreelec
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release
        id: release_prep
        run: |
          mkdir -p release
          
          # Copy all image files and checksums
          find artifacts -name "*.img.gz" -exec cp {} release/ \;
          find artifacts -name "*.sha256" -exec cp {} release/ \;
          
          # Combine release info
          cat artifacts/release-info-*/release-info-*.md > release/RELEASE_NOTES.md
          
          # Create release tag
          RELEASE_TAG="v2.0-$(date +%Y%m%d-%H%M)"
          RELEASE_NAME="Project-Raven LibreELEC v2.0 - $(date +%Y-%m-%d)"
          
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
          
          echo "Release contents:"
          ls -la release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_prep.outputs.release_tag }}
          name: ${{ steps.release_prep.outputs.release_name }}
          body_path: release/RELEASE_NOTES.md
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-completion:
    needs: [build-libreelec, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "## LibreELEC Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ needs.build-libreelec.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release**: ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-libreelec.result }}" = "success" ]; then
            echo "✅ LibreELEC images built successfully for RPi4 and RPi5" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ LibreELEC build failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "✅ Release created with downloadable images" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.create-release.result }}" = "skipped" ]; then
            echo "⏭️ Release skipped (not main branch push)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Release creation failed" >> $GITHUB_STEP_SUMMARY
          fi
