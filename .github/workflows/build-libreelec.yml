name: Build Custom LibreELEC Image

on:
  push:
    branches: [ main ]
    paths: 
      - '.github/workflows/build-libreelec.yml'
      - 'libreelec-custom-build/**'
      - 'libreelec-tailscale-addon/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      device:
        description: 'Target device (RPi4, RPi5, Generic)'
        required: false
        default: 'RPi5'
        type: choice
        options:
          - RPi4
          - RPi5
          - Generic
      force_clean:
        description: 'Force clean build'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-libreelec

jobs:
  build-libreelec:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6 hours timeout for LibreELEC build
    strategy:
      matrix:
        device: [RPi5]  # Temporarily build only RPi5 to speed up testing
        include:
          - device: RPi5
            project: RPi
            arch: arm
            full_name: "Raspberry Pi 5"
            libreelec_device: "RPi5"
    
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install additional build dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            libgmp-dev \
            libmpfr-dev \
            libmpc-dev \
            texinfo \
            flex \
            help2man \
            gawk \
            wget \
            libtool-bin \
            autotools-dev \
            automake \
            pkg-config \
            libssl-dev \
            libncurses5-dev \
            unzip \
            gperf \
            build-essential \
            bison \
            gettext \
            xfonts-utils \
            rdfind \
            libparse-yapp-perl \
            xsltproc \
            libxml-parser-perl \
            patchutils \
            lzop

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: libreelec-${{ matrix.device }}-${{ github.sha }}

      - name: Clone LibreELEC source
        run: |
          cd libreelec-custom-build
          if [ -d "LibreELEC.tv" ]; then
            echo "Removing incomplete LibreELEC.tv directory..."
            rm -rf LibreELEC.tv
          fi
          
          echo "Cloning LibreELEC source..."
          git clone --depth 1 --branch libreelec-12.0 \
            https://github.com/LibreELEC/LibreELEC.tv.git
          
          echo "LibreELEC directory contents:"
          ls -la LibreELEC.tv/

      - name: Apply comprehensive download fixes
        run: |
          echo "Applying comprehensive package download fixes..."
          
          # Copy our comprehensive fix scripts
          cp scripts/comprehensive-package-fix.sh libreelec-custom-build/
          cp scripts/universal-package-downloader.sh libreelec-custom-build/
          
          cd libreelec-custom-build
          
          # Verify LibreELEC.tv directory exists
          if [ ! -d "LibreELEC.tv/scripts" ]; then
            echo "ERROR: LibreELEC.tv/scripts not found"
            ls -la LibreELEC.tv/ || echo "LibreELEC.tv directory missing"
            exit 1
          fi
          
          echo "Applying comprehensive fixes..."
          chmod +x comprehensive-package-fix.sh universal-package-downloader.sh
          
          # Apply all fixes at once
          ./comprehensive-package-fix.sh LibreELEC.tv
          
          echo "âœ“ Comprehensive package fixes applied successfully!"

      - name: Pre-download sources to fix download failures
        run: |
          # Create sources directory if it doesn't exist
          mkdir -p libreelec-custom-build/LibreELEC.tv/sources
          
          # Pre-download bcmstat source package (GitHub pattern)
          echo "Pre-downloading bcmstat..."
          cd libreelec-custom-build/LibreELEC.tv/sources
          curl -L -o bcmstat-1698ec66f7dd38b21d92958dfe08a79dd07300a5.tar.gz https://github.com/popcornmix/bcmstat/archive/1698ec66f7dd38b21d92958dfe08a79dd07300a5.tar.gz
          
          # Pre-download configtools source package (GNU Savannah pattern)
          echo "Pre-downloading configtools..."
          curl -L -o configtools-2021-08-14.tar.gz https://git.savannah.gnu.org/gitweb/?p=config.git;a=snapshot;h=5123daa3d5;sf=tgz
          
          # Pre-download make source package (GNU mirror pattern)
          echo "Pre-downloading make..."
          curl -L -o make-4.4.1.tar.gz https://mirrors.kernel.org/gnu/make/make-4.4.1.tar.gz
          
          # Pre-download fakeroot source package (Debian pattern)
          echo "Pre-downloading fakeroot..."
          curl -L -o fakeroot-1.32.2.tar.gz https://deb.debian.org/debian/pool/main/f/fakeroot/fakeroot_1.32.2.orig.tar.gz
          
          # Pre-download ninja source package (GitHub v2 pattern)
          echo "Pre-downloading ninja..."
          curl -L -o ninja-1.11.1.tar.gz https://github.com/ninja-build/ninja/archive/refs/tags/v1.11.1.tar.gz
          
          # Pre-download autoconf source package (GNU mirror v2 pattern)
          echo "Pre-downloading autoconf..."
          curl -L -o autoconf-2.71.tar.xz https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.xz
          
          # Pre-download setuptools source package (GitHub v3 pattern)
          echo "Pre-downloading setuptools..."
          curl -L -o setuptools-52.0.0.tar.gz https://github.com/pypa/setuptools/archive/refs/tags/v52.0.0.tar.gz
          
          cd ../../..

      - name: Copy custom packages
        run: |
          cd libreelec-custom-build
          
          echo "Copying Tailscale add-on..."
          mkdir -p LibreELEC.tv/packages/addons/service/tailscale
          cp -r ../libreelec-tailscale-addon/* LibreELEC.tv/packages/addons/service/tailscale/
          
          echo "Tailscale add-on copied:"
          ls -la LibreELEC.tv/packages/addons/service/tailscale/

      - name: Configure build
        run: |
          cd libreelec-custom-build
          echo "Configuring build for ${{ matrix.device }}..."

      - name: Build LibreELEC image
        run: |
          cd libreelec-custom-build/LibreELEC.tv
          
          echo "Starting LibreELEC build for ${{ matrix.device }}..."
          echo "Build started at: $(date)"
          
          # Run the build with timeout and progress monitoring
          timeout 300m make PROJECT=${{ matrix.project }} ARCH=${{ matrix.arch }} DEVICE=${{ matrix.libreelec_device }} -j$(nproc) image
          
          echo "Build completed at: $(date)"
          echo "Build artifacts:"
          find target -name "*.img.gz" -o -name "*.tar" 2>/dev/null || echo "No build artifacts found"

      - name: Prepare release artifacts
        if: success()
        run: |
          cd libreelec-custom-build/LibreELEC.tv
          
          mkdir -p ../../release-artifacts
          
          # Find and copy image files
          find target -name "*.img.gz" -exec cp {} ../../release-artifacts/ \; 2>/dev/null || true
          find target -name "*.tar" -exec cp {} ../../release-artifacts/ \; 2>/dev/null || true
          
          # List what we found
          echo "Release artifacts prepared:"
          ls -la ../../release-artifacts/ || echo "No artifacts to release"

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: libreelec-${{ matrix.device }}-${{ github.sha }}
          path: release-artifacts/
          retention-days: 30

  create-release:
    needs: build-libreelec
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "build-${{ github.sha }}"
          name: "LibreELEC Build ${{ github.sha }}"
          body: |
            Automated LibreELEC build from commit ${{ github.sha }}
            
            Built with comprehensive Universal Package Download System
          files: release-artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-completion:
    needs: [build-libreelec]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Summary
        run: |
          echo "Build completed for commit: ${{ github.sha }}"
          echo "Build status: ${{ needs.build-libreelec.result }}"
