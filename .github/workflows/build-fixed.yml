name: Build SoulBox SD Card Image (Fixed)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Manual repository checkout
      run: |
        echo "=== Manual Git Checkout ==="
        cd /tmp
        git clone http://192.168.176.113:3000/reaper/soulbox.git soulbox-build
        cd soulbox-build
        echo "Repository cloned successfully"
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        # Copy to workspace
        cp -r . $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE
        echo "Files in workspace:"
        ls -la
      
    - name: Free up disk space
      run: |
        # Remove unnecessary packages to free up space
        sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' '^php.*' '^mysql-.*' 2>/dev/null || true
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        # Remove large directories if they exist
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost 2>/dev/null || true
        
        # Show available space
        df -h
    
    - name: Set up Docker
      run: |
        # Ensure Docker is available and running
        sudo systemctl start docker 2>/dev/null || true
        docker --version
        
    - name: Enable ARM64 emulation
      run: |
        # Enable binfmt_misc support for ARM64 emulation
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Verify ARM64 emulation is working
        docker run --rm --platform linux/arm64 ubuntu:22.04 uname -m || echo "Platform flag not supported, will use manual setup"
    
    - name: Build SoulBox Image
      run: |
        # Make build script executable
        chmod +x build-minimal-emulation.sh
        
        # Create output directory for artifacts
        mkdir -p artifacts
        
        # Run the build with proper error handling
        set -e
        
        echo "=== Starting SoulBox Image Build ==="
        ./build-minimal-emulation.sh
        
        echo "=== Build completed, processing artifacts ==="
        
        # Find the built image
        IMAGE_FILE=$(find build/ -name "*.img" -type f 2>/dev/null | head -1)
        
        if [ -n "$IMAGE_FILE" ] && [ -f "$IMAGE_FILE" ]; then
          echo "Found image: $IMAGE_FILE"
          
          # Get image info
          IMAGE_SIZE=$(du -h "$IMAGE_FILE" | cut -f1)
          echo "Image size: $IMAGE_SIZE"
          
          # Copy to artifacts directory with timestamp
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ARTIFACT_NAME="soulbox-${TIMESTAMP}.img"
          cp "$IMAGE_FILE" "artifacts/$ARTIFACT_NAME"
          
          # Create checksum
          cd artifacts
          sha256sum "$ARTIFACT_NAME" > "${ARTIFACT_NAME}.sha256"
          
          # Create build info file
          echo "SoulBox SD Card Image" > build-info.txt
          echo "Build Date: $(date -u)" >> build-info.txt
          echo "Git Commit: ${GITHUB_SHA:-unknown}" >> build-info.txt
          echo "Image Size: $IMAGE_SIZE" >> build-info.txt
          echo "Architecture: ARM64 (aarch64)" >> build-info.txt
          echo "" >> build-info.txt
          echo "Flash Instructions:" >> build-info.txt
          echo "1. Download the .img file" >> build-info.txt
          echo "2. Use balenaEtcher, Raspberry Pi Imager, or dd command" >> build-info.txt
          echo "3. Flash to SD card (minimum 8GB recommended)" >> build-info.txt
          echo "4. Insert into Raspberry Pi 4/5 and power on" >> build-info.txt
          echo "" >> build-info.txt
          echo "Verification:" >> build-info.txt
          echo "- Check SHA256: sha256sum -c ${ARTIFACT_NAME}.sha256" >> build-info.txt
          
          echo "Artifacts prepared:"
          ls -la
          
        else
          echo "ERROR: No image file found after build!"
          find build/ -type f 2>/dev/null || echo "Build directory is empty"
          exit 1
        fi

    - name: Upload SD Card Image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: soulbox-sd-image
        path: artifacts/
        retention-days: 30
        
    - name: Upload Build Logs  
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-logs
        path: |
          build/
          *.log
        retention-days: 7

    - name: Create Release Info (on main push)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "=== Build completed successfully on main branch ==="
        echo "Artifacts are available for download from the Actions tab"
        echo "Image files:"
        ls -la artifacts/ || true
        
        # Note: Gitea releases require manual creation or additional setup
        # The built images are available as workflow artifacts
