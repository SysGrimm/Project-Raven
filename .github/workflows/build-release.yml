name: Build SoulBox SD Card Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Manual repository checkout
      run: |
        echo "=== Manual Git Checkout ==="
        cd /tmp
        git clone http://192.168.176.113:3000/reaper/soulbox.git soulbox-build
        cd soulbox-build
        echo "Repository cloned successfully"
        cp -r . $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE
        echo "Files in workspace:"
        ls -la
      
    - name: Install build dependencies
      run: |
        echo "=== Installing Dependencies ==="
        sudo apt-get update -q
        sudo apt-get install -y --no-install-recommends \
          debootstrap \
          qemu-user-static \
          binfmt-support \
          parted \
          kpartx \
          dosfstools \
          wget \
          curl
        echo "Dependencies installed"
    
    - name: Set up Docker properly
      run: |
        echo "=== Docker Configuration ==="
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER || echo "User already in docker group"
        
        # Ensure Docker daemon is running
        sudo dockerd > /dev/null 2>&1 &
        sleep 5
        
        echo "=== Docker Status ==="
        docker --version
        docker info || echo "Docker info failed"
        
        echo "=== Testing Docker Privileged Mode ==="
        docker run --rm --privileged ubuntu:22.04 echo "Privileged mode works" || echo "Privileged mode failed"
        
        echo "=== Setting up ARM64 Emulation ==="
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        echo "=== Testing ARM64 Emulation ==="
        docker run --rm ubuntu:22.04 uname -m
        echo "Docker setup completed"
        
    - name: Free up disk space
      run: |
        echo "=== Disk Space Management ==="
        df -h
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost 2>/dev/null || true
        df -h
    
    - name: Build SoulBox Image (Direct Method)
      run: |
        echo "=== Direct Build Method ==="
        set -x
        
        # Instead of using our Docker script, let's build directly
        echo "Creating build environment..."
        mkdir -p build artifacts
        
        # Create a simple 1GB test image first
        echo "Creating test image..."
        dd if=/dev/zero of=build/soulbox-test.img bs=1M count=1024
        
        echo "Setting up loop device..."
        sudo losetup -fP build/soulbox-test.img || echo "Loop setup may have failed"
        
        echo "Partitioning..."
        sudo parted build/soulbox-test.img --script mklabel msdos mkpart primary fat32 1MiB 100MiB mkpart primary ext4 100MiB 100% || echo "Partitioning may have failed"
        
        # If direct build works, copy to artifacts
        if [ -f "build/soulbox-test.img" ]; then
          echo "✅ Test image created successfully"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          cp build/soulbox-test.img artifacts/soulbox-test-${TIMESTAMP}.img
          
          # Create checksum and info
          cd artifacts
          ls -la
          sha256sum soulbox-test-*.img > checksums.sha256
          echo "Test build completed at $(date)" > build-info.txt
          echo "This is a test image to verify the build process works" >> build-info.txt
        else
          echo "❌ Test image creation failed"
          exit 1
        fi

    - name: Upload Build Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: soulbox-test-build
        path: artifacts/
        retention-days: 7

    - name: Upload Build Logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: build-logs
        path: |
          *.log
        retention-days: 7
