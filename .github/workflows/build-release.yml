name: Build SoulBox SD Card Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Manual repository checkout
      run: |
        echo "=== Manual Git Checkout ==="
        cd /tmp
        git clone http://192.168.176.113:3000/reaper/soulbox.git soulbox-build
        cd soulbox-build
        echo "Repository cloned successfully"
        cp -r . $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE
        echo "Files in workspace:"
        ls -la
      
    - name: Install build dependencies
      run: |
        echo "=== Installing Dependencies ==="
        sudo apt-get update -q
        sudo apt-get install -y --no-install-recommends \
          debootstrap \
          qemu-user-static \
          binfmt-support \
          parted \
          kpartx \
          dosfstools \
          e2fsprogs \
          wget \
          curl \
          systemd-container \
          util-linux \
          mount
        echo "Dependencies installed successfully"
    
    - name: Set up ARM64 emulation
      run: |
        echo "=== Setting up ARM64 Emulation ==="
        
        # Mount binfmt_misc if not mounted
        sudo mount -t binfmt_misc binfmt_misc /proc/sys/fs/binfmt_misc 2>/dev/null || echo "binfmt_misc already mounted"
        
        # Register ARM64 emulation
        echo ':qemu-aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-aarch64-static:F' | sudo tee /proc/sys/fs/binfmt_misc/register > /dev/null || echo "ARM64 already registered"
        
        # Verify registration
        echo "ARM64 emulation status:"
        cat /proc/sys/fs/binfmt_misc/qemu-aarch64 || echo "Could not read ARM64 registration"
        
        echo "✅ ARM64 emulation configured"
        
    - name: Free up disk space
      run: |
        echo "=== Disk Space Management ==="
        df -h
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost /var/lib/apt/lists/* 2>/dev/null || true
        echo "Disk space after cleanup:"
        df -h
    
    - name: Build SoulBox ARM64 Root Filesystem
      run: |
        echo "=== Building SoulBox ARM64 Root Filesystem ==="
        set -e
        set -x
        
        # Build configuration
        DEBIAN_SUITE="bookworm"
        DEBIAN_MIRROR="http://deb.debian.org/debian"
        ARCH="arm64"
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        
        echo "Building SoulBox rootfs with Debian ${DEBIAN_SUITE} ${ARCH}"
        
        # Create build directory
        mkdir -p build artifacts rootfs boot
        cd build
        
        echo "=== Installing Base System ==="
        # Build rootfs directly without loop devices
        sudo debootstrap \
          --arch=${ARCH} \
          --include=systemd,udev,kmod,ifupdown,iproute2,iputils-ping,wget,ca-certificates,openssh-server,curl,apt-transport-https,gnupg,lsb-release,sudo,nano,htop,rsync \
          ${DEBIAN_SUITE} ../rootfs ${DEBIAN_MIRROR}
        
        echo "=== Configuring System ==="
        
        # Copy qemu static for chroot operations
        sudo cp /usr/bin/qemu-aarch64-static ../rootfs/usr/bin/
        
        # Configure basic system
        echo "soulbox" | sudo tee ../rootfs/etc/hostname
        
        # Configure hosts file
        sudo tee ../rootfs/etc/hosts << HOSTSEOF
        127.0.0.1    localhost
        127.0.1.1    soulbox
        ::1          localhost ip6-localhost ip6-loopback
        ff02::1      ip6-allnodes
        ff02::2      ip6-allrouters
        HOSTSEOF
        
        # Configure network
        sudo tee ../rootfs/etc/network/interfaces << NETEOF
        auto lo
        iface lo inet loopback
        
        auto eth0
        iface eth0 inet dhcp
        NETEOF
        
        # Configure APT sources
        sudo tee ../rootfs/etc/apt/sources.list << APTEOF
        deb ${DEBIAN_MIRROR} ${DEBIAN_SUITE} main contrib non-free non-free-firmware
        deb http://security.debian.org/debian-security ${DEBIAN_SUITE}-security main contrib non-free non-free-firmware
        deb ${DEBIAN_MIRROR} ${DEBIAN_SUITE}-updates main contrib non-free non-free-firmware
        APTEOF
        
        # Configure fstab
        sudo tee ../rootfs/etc/fstab << FSTABEOF
        proc            /proc           proc    defaults          0       0
        /dev/mmcblk0p2  /               ext4    defaults,noatime  0       1
        /dev/mmcblk0p1  /boot/firmware  vfat    defaults          0       2
        tmpfs           /tmp            tmpfs   defaults,noatime  0       0
        FSTABEOF
        
        # Create boot directory
        sudo mkdir -p ../rootfs/boot/firmware
        
        # Set up basic user and SSH
        sudo chroot ../rootfs /bin/bash -c "
          export DEBIAN_FRONTEND=noninteractive
          
          # Enable SSH
          systemctl enable ssh
          
          # Create soulbox user
          useradd -m -s /bin/bash -G sudo soulbox
          echo 'soulbox:soulbox' | chpasswd
          echo 'root:soulbox' | chpasswd
          
          # Configure SSH to allow password authentication temporarily
          sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
          
          # Set timezone to UTC
          ln -sf /usr/share/zoneinfo/UTC /etc/localtime
          
          # Generate locales
          echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen
          locale-gen
          
          # Clean up
          apt-get clean
          rm -rf /var/lib/apt/lists/*
        "
        
        # Remove qemu static
        sudo rm ../rootfs/usr/bin/qemu-aarch64-static
        
        echo "=== Creating Filesystem Archives ==="
        cd ../rootfs
        
        # Create compressed rootfs archive
        sudo tar -czf ../artifacts/soulbox-rootfs-${TIMESTAMP}.tar.gz .
        
        # Create boot filesystem (minimal for now)
        cd ../boot
        # Create a simple boot configuration
        echo "# SoulBox Boot Configuration" | sudo tee config.txt
        echo "# This will be populated with actual Pi firmware files" | sudo tee >> config.txt
        sudo tar -czf ../artifacts/soulbox-boot-${TIMESTAMP}.tar.gz .
        
        cd ../artifacts
        
        # Create checksums
        sha256sum *.tar.gz > checksums.sha256
        
        # Create detailed build info and instructions
        cat > build-info.txt << INFOEOF
        SoulBox ARM64 Root Filesystem Build
        Build Date: $(date -u)
        Git Commit: ${GITHUB_SHA:-$(git rev-parse HEAD 2>/dev/null || echo 'unknown')}
        Architecture: ARM64 (aarch64)
        Debian Release: ${DEBIAN_SUITE}
        
        FILES INCLUDED:
        - soulbox-rootfs-${TIMESTAMP}.tar.gz: Complete Debian ARM64 root filesystem
        - soulbox-boot-${TIMESTAMP}.tar.gz: Basic boot filesystem template
        - checksums.sha256: SHA256 verification checksums
        - build-info.txt: This documentation file
        
        CREATING SD CARD IMAGE MANUALLY:
        
        Since loop devices aren't available in CI, here's how to create the final image:
        
        1. Download all artifacts from this build
        2. On a Linux system with loop device support:
        
        # Create 4GB image
        fallocate -l 4G soulbox.img
        
        # Set up loop device
        LOOP_DEV=\$(sudo losetup --find --show soulbox.img)
        
        # Partition
        sudo parted \$LOOP_DEV --script mklabel gpt
        sudo parted \$LOOP_DEV --script mkpart primary fat32 1MiB 257MiB
        sudo parted \$LOOP_DEV --script mkpart primary ext4 257MiB 100%
        sudo parted \$LOOP_DEV --script set 1 boot on
        
        # Format
        sudo mkfs.vfat -F 32 -n "SOULBOOT" \${LOOP_DEV}p1
        sudo mkfs.ext4 -F -L "soulbox" \${LOOP_DEV}p2
        
        # Mount and extract
        mkdir -p mnt/boot mnt/root
        sudo mount \${LOOP_DEV}p1 mnt/boot
        sudo mount \${LOOP_DEV}p2 mnt/root
        
        sudo tar -xzf soulbox-rootfs-${TIMESTAMP}.tar.gz -C mnt/root
        sudo tar -xzf soulbox-boot-${TIMESTAMP}.tar.gz -C mnt/boot
        
        # Add Raspberry Pi firmware (download from official Pi repo)
        # wget https://github.com/raspberrypi/firmware/archive/refs/heads/master.zip
        # Extract boot files to mnt/boot/
        
        # Cleanup
        sudo umount mnt/boot mnt/root
        sudo losetup -d \$LOOP_DEV
        
        # Your soulbox.img is now ready!
        
        DEFAULT CREDENTIALS:
        - Username: soulbox, Password: soulbox
        - Username: root, Password: soulbox
        - SSH enabled on port 22
        
        FEATURES INCLUDED:
        - Complete Debian Bookworm ARM64 base system
        - SSH server enabled
        - Network configuration (DHCP)
        - Essential system tools (nano, htop, rsync, curl, wget)
        - User account with sudo privileges
        - Proper timezone and locale configuration
        
        VERIFICATION:
        sha256sum -c checksums.sha256
        INFOEOF
        
        echo "✅ SoulBox rootfs built successfully!"
        ls -la

    - name: Upload SoulBox Filesystem Components
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: soulbox-filesystem-components
        path: artifacts/
        retention-days: 30

    - name: Upload Build Logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-logs
        path: |
          *.log
          build/
        retention-days: 7
        
    - name: Build Summary
      if: success()
      run: |
        echo "🎉 SoulBox ARM64 Filesystem Build Complete!"
        echo ""
        echo "📦 Components created:"
        ls -la artifacts/
        echo ""
        echo "⚠️  NOTE: Due to runner limitations, this creates filesystem components"
        echo "instead of a complete disk image. Follow the instructions in"
        echo "build-info.txt to create the final SD card image."
        echo ""
        echo "📥 Download artifacts and use the manual assembly instructions"
        echo "💾 Final image will be flashable to SD card for Pi 4/5"
        echo "🚀 Default login: soulbox/soulbox or root/soulbox"
