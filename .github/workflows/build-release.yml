name: Build SoulBox SD Card Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        # Remove unnecessary packages to free up space
        sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' '^php.*' '^mysql-.*' azure-cli google-cloud-sdk hhvm google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri
        sudo apt-get autoremove -y
        sudo apt-get clean
        
        # Remove large directories
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
        
        # Show available space
        df -h
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Enable privileged mode and binfmt_misc
      run: |
        # Enable binfmt_misc support for ARM64 emulation
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        
        # Verify ARM64 emulation is working
        docker run --rm --platform linux/arm64 ubuntu:22.04 uname -m
    
    - name: Build SoulBox Image
      run: |
        # Make build script executable
        chmod +x build-minimal-emulation.sh
        
        # Create output directory for artifacts
        mkdir -p artifacts
        
        # Run the build with proper error handling
        set -e
        
        echo "=== Starting SoulBox Image Build ==="
        ./build-minimal-emulation.sh
        
        echo "=== Build completed, processing artifacts ==="
        
        # Find the built image
        IMAGE_FILE=$(find build/ -name "*.img" -type f | head -1)
        
        if [ -n "$IMAGE_FILE" ] && [ -f "$IMAGE_FILE" ]; then
          echo "Found image: $IMAGE_FILE"
          
          # Get image info
          IMAGE_SIZE=$(du -h "$IMAGE_FILE" | cut -f1)
          echo "Image size: $IMAGE_SIZE"
          
          # Copy to artifacts directory with timestamp
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ARTIFACT_NAME="soulbox-${TIMESTAMP}.img"
          cp "$IMAGE_FILE" "artifacts/$ARTIFACT_NAME"
          
          # Create checksum
          cd artifacts
          sha256sum "$ARTIFACT_NAME" > "${ARTIFACT_NAME}.sha256"
          
          # Create build info
          cat > build-info.txt << EOL
SoulBox SD Card Image
Build Date: $(date -u)
Git Commit: ${{ github.sha }}
Image Size: $IMAGE_SIZE
Architecture: ARM64 (aarch64)

Flash Instructions:
1. Download the .img file
2. Use balenaEtcher, Raspberry Pi Imager, or dd command
3. Flash to SD card (minimum 8GB recommended)
4. Insert into Raspberry Pi 4/5 and power on

Verification:
- Check SHA256: sha256sum -c ${ARTIFACT_NAME}.sha256
EOL
          
          echo "Artifacts prepared:"
          ls -la
          
        else
          echo "ERROR: No image file found after build!"
          exit 1
        fi

    - name: Upload SD Card Image
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: soulbox-sd-image
        path: artifacts/
        retention-days: 30
        
    - name: Upload Build Logs
      uses: actions/upload-artifact@v4  
      if: failure()
      with:
        name: build-logs
        path: |
          build/
          *.log
        retention-days: 7

    - name: Create Release (on main push)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Install GitHub CLI if not available
        type gh >/dev/null 2>&1 || {
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update && sudo apt install gh -y
        }
        
        # Create release with timestamp
        RELEASE_TAG="release-$(date +%Y%m%d_%H%M%S)"
        RELEASE_NAME="SoulBox Release $(date +%Y-%m-%d)"
        
        cd artifacts
        
        # Create the release
        gh release create "$RELEASE_TAG" \
          --title "$RELEASE_NAME" \
          --notes "Automated SoulBox SD card image build

**Build Information:**
- Commit: ${{ github.sha }}
- Build Date: $(date -u)
- Architecture: ARM64 (Raspberry Pi 4/5)

**Files:**
- \`*.img\`: SD card image (flash directly to SD card)  
- \`*.sha256\`: Checksum for verification
- \`build-info.txt\`: Detailed build information

**Flash Instructions:**
1. Download the .img file
2. Use balenaEtcher or Raspberry Pi Imager
3. Flash to SD card (8GB+ recommended)
4. Boot on Raspberry Pi 4 or 5" \
          --latest \
          *.img *.sha256 build-info.txt || echo "Release creation failed, but build succeeded"

