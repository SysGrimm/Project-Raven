name: Build SoulBox SD Card Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Manual repository checkout
      run: |
        echo "=== Manual Git Checkout ==="
        cd /tmp
        git clone http://192.168.176.113:3000/reaper/soulbox.git soulbox-build
        cd soulbox-build
        echo "Repository cloned successfully"
        echo "Current directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        # Copy to workspace
        cp -r . $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE
        echo "Files in workspace:"
        ls -la
      
    - name: Free up disk space
      run: |
        echo "=== Initial Disk Space ==="
        df -h
        # Remove unnecessary packages to free up space
        sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' '^php.*' '^mysql-.*' 2>/dev/null || true
        sudo apt-get autoremove -y
        sudo apt-get clean
        # Remove large directories if they exist
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost 2>/dev/null || true
        echo "=== Disk Space After Cleanup ==="
        df -h
    
    - name: Set up Docker
      run: |
        echo "=== Docker Setup ==="
        sudo systemctl start docker 2>/dev/null || true
        docker --version
        docker info || echo "Docker info failed"
        echo "Docker setup completed"
        
    - name: Enable ARM64 emulation
      run: |
        echo "=== ARM64 Emulation Setup ==="
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        echo "ARM64 emulation configured"
        
        # Test emulation
        echo "=== Testing ARM64 Emulation ==="
        docker run --rm --platform linux/arm64 ubuntu:22.04 uname -m || echo "Platform flag not supported, will use manual setup"
    
    - name: Check build prerequisites
      run: |
        echo "=== Build Prerequisites Check ==="
        echo "Working directory: $(pwd)"
        echo "Files present:"
        ls -la
        
        echo "=== Checking build script ==="
        if [ -f "build-minimal-emulation.sh" ]; then
          echo "✅ build-minimal-emulation.sh found"
          echo "File permissions:"
          ls -la build-minimal-emulation.sh
          echo "File content preview:"
          head -20 build-minimal-emulation.sh
        else
          echo "❌ build-minimal-emulation.sh NOT found"
          echo "Available files:"
          find . -name "*.sh" -type f
        fi
        
        echo "=== Docker accessibility test ==="
        docker run --rm hello-world || echo "Docker basic test failed"
    
    - name: Build SoulBox Image
      run: |
        echo "=== Starting SoulBox Build Process ==="
        set -x  # Enable verbose logging
        
        # Ensure script is executable
        chmod +x build-minimal-emulation.sh || {
          echo "❌ Failed to make build script executable"
          exit 1
        }
        
        # Create output directory
        mkdir -p artifacts || {
          echo "❌ Failed to create artifacts directory"
          exit 1
        }
        
        echo "=== Executing Build Script ==="
        echo "Current working directory: $(pwd)"
        echo "Script path: $(realpath build-minimal-emulation.sh)"
        echo "Starting build at: $(date)"
        
        # Run the build with full error reporting
        ./build-minimal-emulation.sh 2>&1 | tee build.log || {
          echo "❌ Build script failed with exit code $?"
          echo "=== Build Log Contents ==="
          cat build.log || echo "Could not read build log"
          echo "=== Directory Contents After Failure ==="
          ls -la
          find . -name "*.log" -exec echo "Log file: {}" \; -exec cat {} \; || true
          exit 1
        }
        
        echo "✅ Build script completed successfully"
        echo "Build completed at: $(date)"
        
        echo "=== Post-Build Directory Check ==="
        ls -la
        
        echo "=== Looking for Image Files ==="
        find . -name "*.img" -type f -ls || echo "No .img files found"
        
        # Process build artifacts
        IMAGE_FILE=$(find build/ -name "*.img" -type f 2>/dev/null | head -1)
        
        if [ -n "$IMAGE_FILE" ] && [ -f "$IMAGE_FILE" ]; then
          echo "✅ Found image: $IMAGE_FILE"
          
          # Get image info
          IMAGE_SIZE=$(du -h "$IMAGE_FILE" | cut -f1)
          echo "Image size: $IMAGE_SIZE"
          
          # Copy to artifacts directory with timestamp
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          ARTIFACT_NAME="soulbox-${TIMESTAMP}.img"
          cp "$IMAGE_FILE" "artifacts/$ARTIFACT_NAME"
          
          # Create checksum
          cd artifacts
          sha256sum "$ARTIFACT_NAME" > "${ARTIFACT_NAME}.sha256"
          
          # Create build info file
          echo "SoulBox SD Card Image" > build-info.txt
          echo "Build Date: $(date -u)" >> build-info.txt
          echo "Git Commit: ${GITHUB_SHA:-unknown}" >> build-info.txt
          echo "Image Size: $IMAGE_SIZE" >> build-info.txt
          echo "Architecture: ARM64 (aarch64)" >> build-info.txt
          echo "" >> build-info.txt
          echo "Flash Instructions:" >> build-info.txt
          echo "1. Download the .img file" >> build-info.txt
          echo "2. Use balenaEtcher, Raspberry Pi Imager, or dd command" >> build-info.txt
          echo "3. Flash to SD card (minimum 8GB recommended)" >> build-info.txt
          echo "4. Insert into Raspberry Pi 4/5 and power on" >> build-info.txt
          echo "" >> build-info.txt
          echo "Verification:" >> build-info.txt
          echo "- Check SHA256: sha256sum -c ${ARTIFACT_NAME}.sha256" >> build-info.txt
          
          echo "✅ Artifacts prepared:"
          ls -la
          
        else
          echo "❌ ERROR: No image file found after build!"
          echo "=== Build Directory Contents ==="
          find build/ -type f 2>/dev/null || echo "Build directory is empty or doesn't exist"
          echo "=== Full Directory Listing ==="
          find . -type f -name "*.img" -o -name "*.log" -o -name "soulbox*" 2>/dev/null || echo "No relevant files found"
          exit 1
        fi

    - name: Upload Build Logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: build-logs-detailed
        path: |
          build.log
          *.log
          build/
        retention-days: 7

    - name: Upload SD Card Image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: soulbox-sd-image
        path: artifacts/
        retention-days: 30

    - name: Create Release Info (on main push)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "=== Build completed successfully on main branch ==="
        echo "Artifacts are available for download from the Actions tab"
        echo "Image files:"
        ls -la artifacts/ || true
