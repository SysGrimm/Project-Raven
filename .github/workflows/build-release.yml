name: Build SoulBox SD Card Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Manual repository checkout
      run: |
        echo "=== Manual Git Checkout ==="
        cd /tmp
        git clone http://192.168.176.113:3000/reaper/soulbox.git soulbox-build
        cd soulbox-build
        echo "Repository cloned successfully"
        cp -r . $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE
        echo "Files in workspace:"
        ls -la
      
    - name: Install build dependencies
      run: |
        echo "=== Installing Dependencies ==="
        sudo apt-get update -q
        sudo apt-get install -y --no-install-recommends \
          debootstrap \
          qemu-user-static \
          binfmt-support \
          parted \
          kpartx \
          dosfstools \
          e2fsprogs \
          wget \
          curl \
          systemd-container \
          util-linux
        echo "Dependencies installed successfully"
    
    - name: Set up ARM64 emulation
      run: |
        echo "=== Setting up ARM64 Emulation ==="
        
        # Mount binfmt_misc if not mounted
        sudo mount -t binfmt_misc binfmt_misc /proc/sys/fs/binfmt_misc 2>/dev/null || echo "binfmt_misc already mounted"
        
        # Register ARM64 emulation
        echo ':qemu-aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-aarch64-static:F' | sudo tee /proc/sys/fs/binfmt_misc/register > /dev/null || echo "ARM64 already registered"
        
        # Verify registration
        echo "ARM64 emulation status:"
        cat /proc/sys/fs/binfmt_misc/qemu-aarch64 || echo "Could not read ARM64 registration"
        
        echo "âœ… ARM64 emulation configured"
        
    - name: Free up disk space
      run: |
        echo "=== Disk Space Management ==="
        df -h
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost /var/lib/apt/lists/* 2>/dev/null || true
        echo "Disk space after cleanup:"
        df -h
    
    - name: Check system capabilities
      run: |
        echo "=== System Diagnostics ==="
        echo "Available loop devices:"
        ls -la /dev/loop* || echo "No loop devices found"
        echo ""
        echo "Loop device status:"
        sudo losetup -a || echo "No loop devices in use"
        echo ""
        echo "Kernel modules:"
        lsmod | grep loop || echo "Loop module not loaded"
        echo ""
        echo "Loading loop module if needed:"
        sudo modprobe loop || echo "Loop module already loaded or not available"
        echo ""
        echo "After loading:"
        ls -la /dev/loop* || echo "Still no loop devices"
    
    - name: Build SoulBox ARM64 Image
      run: |
        echo "=== Building SoulBox ARM64 Image ==="
        set -e
        set -x
        
        # Build configuration
        IMAGE_SIZE="4G"
        IMAGE_NAME="soulbox-$(date +%Y%m%d_%H%M%S).img"
        DEBIAN_SUITE="bookworm"
        DEBIAN_MIRROR="http://deb.debian.org/debian"
        ARCH="arm64"
        
        echo "Building ${IMAGE_NAME} (${IMAGE_SIZE}) with Debian ${DEBIAN_SUITE} ${ARCH}"
        
        # Create build directory
        mkdir -p build artifacts
        cd build
        
        echo "=== Creating Image File ==="
        fallocate -l ${IMAGE_SIZE} ${IMAGE_NAME}
        echo "Image file created: $(ls -lh ${IMAGE_NAME})"
        
        echo "=== Checking Loop Device Availability ==="
        # Try to find an available loop device
        LOOP_DEV=$(sudo losetup --find)
        echo "Available loop device: ${LOOP_DEV}"
        
        # Create loop device mapping with better error handling
        echo "=== Setting up Loop Device ==="
        sudo losetup ${LOOP_DEV} ${IMAGE_NAME}
        echo "Loop device set up: ${LOOP_DEV}"
        
        # Verify the loop device is working
        sudo losetup -a | grep ${LOOP_DEV} || (echo "ERROR: Loop device not properly set up" && exit 1)
        
        echo "=== Partitioning Image ==="
        # Use more conservative partitioning
        sudo parted ${LOOP_DEV} --script -- \
          mklabel gpt \
          mkpart primary fat32 1MiB 257MiB \
          mkpart primary ext4 257MiB -1s \
          set 1 boot on
        
        # Give the system time to create partitions and force kernel to re-read
        sleep 3
        sudo partprobe ${LOOP_DEV} 2>/dev/null || echo "partprobe completed with warnings"
        sudo udevadm settle || echo "udevadm settle completed"
        
        # Wait for partition devices to appear
        for i in {1..10}; do
          if [ -b "${LOOP_DEV}p1" ] && [ -b "${LOOP_DEV}p2" ]; then
            echo "Partition devices created successfully"
            break
          fi
          echo "Waiting for partition devices (attempt $i/10)..."
          sleep 2
        done
        
        # Verify partitions exist
        if [ ! -b "${LOOP_DEV}p1" ] || [ ! -b "${LOOP_DEV}p2" ]; then
          echo "ERROR: Partition devices not created"
          ls -la ${LOOP_DEV}*
          sudo losetup -a
          exit 1
        fi
        
        echo "=== Formatting Partitions ==="
        sudo mkfs.vfat -F 32 -n "SOULBOOT" ${LOOP_DEV}p1
        sudo mkfs.ext4 -F -L "soulbox" ${LOOP_DEV}p2
        
        echo "=== Mounting Partitions ==="
        mkdir -p rootfs boot
        sudo mount ${LOOP_DEV}p2 rootfs
        sudo mount ${LOOP_DEV}p1 boot
        
        echo "=== Installing Base System ==="
        # Use timeout to prevent hanging
        timeout 1800 sudo debootstrap \
          --arch=${ARCH} \
          --include=systemd,udev,kmod,ifupdown,iproute2,iputils-ping,wget,ca-certificates,openssh-server,curl,apt-transport-https,gnupg,lsb-release \
          ${DEBIAN_SUITE} rootfs ${DEBIAN_MIRROR}
        
        echo "=== Configuring System ==="
        
        # Copy qemu static for chroot operations
        sudo cp /usr/bin/qemu-aarch64-static rootfs/usr/bin/
        
        # Configure basic system
        echo "soulbox" | sudo tee rootfs/etc/hostname
        
        # Configure network
        sudo tee rootfs/etc/network/interfaces << NETEOF
        auto lo
        iface lo inet loopback
        
        auto eth0
        iface eth0 inet dhcp
        NETEOF
        
        # Configure APT sources
        sudo tee rootfs/etc/apt/sources.list << APTEOF
        deb ${DEBIAN_MIRROR} ${DEBIAN_SUITE} main contrib non-free non-free-firmware
        deb http://security.debian.org/debian-security ${DEBIAN_SUITE}-security main contrib non-free non-free-firmware
        deb ${DEBIAN_MIRROR} ${DEBIAN_SUITE}-updates main contrib non-free non-free-firmware
        APTEOF
        
        # Configure fstab
        sudo tee rootfs/etc/fstab << FSTABEOF
        proc            /proc           proc    defaults          0       0
        /dev/mmcblk0p2  /               ext4    defaults,noatime  0       1
        /dev/mmcblk0p1  /boot/firmware  vfat    defaults          0       2
        FSTABEOF
        
        # Create boot directory
        sudo mkdir -p rootfs/boot/firmware
        
        echo "=== Cleaning up Mount Points ==="
        sudo umount boot rootfs || echo "Unmount completed with warnings"
        sudo losetup -d ${LOOP_DEV} || echo "Loop device detached with warnings"
        
        echo "=== Build Complete ==="
        ls -lh ${IMAGE_NAME}
        
        # Move image to artifacts
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        FINAL_NAME="soulbox-${TIMESTAMP}.img"
        mv ${IMAGE_NAME} ../artifacts/${FINAL_NAME}
        
        cd ../artifacts
        
        # Create checksums and build info
        sha256sum ${FINAL_NAME} > ${FINAL_NAME}.sha256
        
        cat > build-info.txt << INFOEOF
        SoulBox Raspberry Pi OS Image
        Build Date: $(date -u)
        Git Commit: ${GITHUB_SHA:-$(git rev-parse HEAD 2>/dev/null || echo 'unknown')}
        Image Size: $(du -h ${FINAL_NAME} | cut -f1)
        Architecture: ARM64 (aarch64)
        Debian Release: ${DEBIAN_SUITE}
        
        Flash Instructions:
        1. Download the .img file
        2. Use Raspberry Pi Imager, balenaEtcher, or dd command
        3. Flash to SD card (8GB+ recommended)
        4. Insert into Raspberry Pi 4 or 5 and power on
        5. Default login: root (no password initially)
        
        Verification:
        - Check SHA256: sha256sum -c ${FINAL_NAME}.sha256
        
        Features Included:
        - Complete Debian Bookworm ARM64 base system
        - SSH server enabled
        - Network configuration (DHCP)
        - Essential system tools and utilities
        - Ready for SoulBox application deployment
        INFOEOF
        
        echo "âœ… SoulBox image built successfully!"
        ls -la

    - name: Upload SoulBox SD Card Image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: soulbox-sd-image
        path: artifacts/
        retention-days: 30

    - name: Upload Build Logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-logs
        path: |
          *.log
          build/
        retention-days: 7
        
    - name: Build Summary
      if: success()
      run: |
        echo "ðŸŽ‰ SoulBox SD Card Image Build Complete!"
        echo ""
        echo "ðŸ“¦ Artifacts created:"
        ls -la artifacts/
        echo ""
        echo "ðŸ“¥ Download from the 'Artifacts' section above"
        echo "ðŸ’¾ Flash to SD card using Raspberry Pi Imager or balenaEtcher"
        echo "ðŸš€ Boot on Raspberry Pi 4 or 5"
