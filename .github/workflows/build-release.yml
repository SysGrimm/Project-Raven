name: Build SoulBox Will-o'-Wisp Media Center

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'wiki/**'
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'wiki/**'
      - '*.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  build-components:
    runs-on: ubuntu-latest
    # NOTE: This job uses container-friendly build approach (no loop devices needed)
    # Based on LibreELEC's methodology using mtools and e2tools
    
    steps:
    - name: Manual repository checkout
      run: |
        echo "=== Manual Git Checkout ==="
        cd /tmp
        # Test: Try public IP if port forwarding is set up (external port 3000 -> 192.168.176.113:3000)
        git clone http://68.13.47.218:3000/reaper/soulbox.git soulbox-build
        cd soulbox-build
        echo "Repository cloned successfully"
        cp -r . $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE
        echo "Files in workspace:"
        ls -la
      
    - name: Install build dependencies
      run: |
        echo "=== Installing Dependencies ==="
        sudo apt-get update -q
        sudo apt-get install -y --no-install-recommends \
          parted \
          mtools \
          e2tools \
          dosfstools \
          e2fsprogs \
          build-essential \
          autoconf \
          automake \
          libtool \
          pkg-config \
          wget \
          curl \
          xz-utils \
          coreutils \
          zip \
          tar
        echo "Dependencies installed successfully"
    
    - name: Build populatefs from source
      run: |
        echo "=== Building populatefs from e2fsprogs source ==="
        
        # Create build directory
        mkdir -p /tmp/populatefs-build
        cd /tmp/populatefs-build
        
        # Download e2fsprogs source (contains populatefs)
        echo "Downloading e2fsprogs source..."
        wget -q https://www.kernel.org/pub/linux/kernel/people/tytso/e2fsprogs/v1.47.0/e2fsprogs-1.47.0.tar.xz
        tar -xf e2fsprogs-1.47.0.tar.xz
        cd e2fsprogs-1.47.0
        
        # Check what's available in contrib
        echo "Available contrib tools:"
        ls -la contrib/
        
        # Check if populate-extfs.sh exists (shell script version)
        if [[ -f "contrib/populate-extfs.sh" ]]; then
            echo "‚úÖ Found populate-extfs.sh script"
            # Install the shell script version
            sudo cp contrib/populate-extfs.sh /usr/local/bin/populatefs
            sudo chmod +x /usr/local/bin/populatefs
            
            # Fix the hardcoded debugfs path to use system debugfs
            echo "üîß Patching populatefs to use system debugfs..."
            sudo sed -i 's|\"\$CONTRIB_DIR/../debugfs/debugfs\"|debugfs|g' /usr/local/bin/populatefs
            sudo sed -i 's|\$CONTRIB_DIR/../debugfs/debugfs|debugfs|g' /usr/local/bin/populatefs
            echo "üìù Verifying populatefs patch applied correctly..."
            grep -n "debugfs" /usr/local/bin/populatefs || echo "No debugfs references found"
            
            echo "‚úÖ populate-extfs.sh installed as populatefs"
        elif [[ -d "contrib/dir2fs" ]]; then
            echo "‚úÖ Found dir2fs as alternative to populatefs"
            # Configure and build e2fsprogs to get dir2fs
            ./configure --prefix=/usr/local 2>&1 | head -20
            
            # Build the required libraries first
            make -j$(nproc) -C lib/ext2fs
            make -j$(nproc) -C lib/e2p  
            make -j$(nproc) -C lib/support
            
            # Build dir2fs
            if make -j$(nproc) -C contrib/dir2fs 2>&1; then
                echo "‚úÖ dir2fs build completed successfully"
                # Install dir2fs as populatefs alternative
                sudo cp contrib/dir2fs/dir2fs /usr/local/bin/populatefs
                sudo chmod +x /usr/local/bin/populatefs
                echo "‚úÖ dir2fs installed as populatefs"
            else
                echo "‚ùå dir2fs build failed"
                exit 1
            fi
        else
            echo "‚ùå Neither populatefs nor suitable alternatives found"
            echo "Available contrib tools:"
            ls contrib/ || echo "No contrib directory found"
            echo "‚ö†Ô∏è  Skipping populatefs build - will rely on e2tools fallback"
            # Create a dummy populatefs that always fails gracefully
            echo '#!/bin/bash' | sudo tee /usr/local/bin/populatefs
            echo 'echo "populatefs not available - using e2tools fallback"' | sudo tee -a /usr/local/bin/populatefs
            echo 'exit 1' | sudo tee -a /usr/local/bin/populatefs
            sudo chmod +x /usr/local/bin/populatefs
        fi
        
        # Verify installation
        if [[ -f "/usr/local/bin/populatefs" ]]; then
            echo "‚úÖ populatefs (or alternative) installed"
            ls -la /usr/local/bin/populatefs
        else
            echo "‚ùå populatefs installation failed"
            exit 1
        fi
        
        # Cleanup
        cd /
        rm -rf /tmp/populatefs-build
        echo "populatefs build/install complete"
    
    - name: Verify build tools
      run: |
        echo "=== Verifying Build Tools ==="
        # Check essential tools for container-friendly image building
        which curl && echo "curl: OK" || echo "curl: MISSING"
        which xz && echo "xz: OK" || echo "xz: MISSING" 
        which parted && echo "parted: OK" || echo "parted: MISSING"
        which mcopy && echo "mtools: OK" || echo "mtools: MISSING"
        which populatefs || which /usr/local/bin/populatefs && echo "populatefs: OK (preferred)" || echo "populatefs: MISSING (will use e2tools fallback)"
        which e2cp && echo "e2tools: OK" || echo "e2tools: MISSING"
        which mke2fs && echo "e2fsprogs: OK" || echo "e2fsprogs: MISSING"
        which dd && echo "dd: OK" || echo "dd: MISSING"
        echo "Build tools verification complete"
        
    - name: Free up disk space
      run: |
        echo "=== Disk Space Management ==="
        df -h
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost /var/lib/apt/lists/* 2>/dev/null || true
        echo "Disk space after cleanup:"
        df -h
    
    - name: Build SoulBox Media Center Image
      env:
        TSAUTH: ${{ secrets.TSAUTH }}
      run: |
        echo "=== Building SoulBox Will-o'-Wisp Media Center ==="
        set -e
        set -x
        
        # Get version using Gitea-based smart versioning
        if [ -f "scripts/gitea-version-manager.sh" ]; then
            echo "Using Gitea-based smart versioning..."
            # Use auto mode which runs silently and only outputs version to stdout
            VERSION=$(./scripts/gitea-version-manager.sh auto || echo "v0.1.0")
            echo "Generated version: $VERSION"
        elif [ -f "scripts/version-manager.sh" ]; then
            echo "Using git tag fallback versioning..."
            VERSION=$(./scripts/version-manager.sh auto 2>/dev/null | tail -1 || echo "v0.1.0")
        else
            VERSION="v0.1.0"
        fi
        
        echo "Building SoulBox $VERSION - Complete Media Center with Kodi & Tailscale"
        echo "Version source: Gitea releases API with automatic increment detection"
        
        # Configure Tailscale auth from secret (secure)
        if [ -n "${TSAUTH:-}" ]; then
            echo "Tailscale auth key configured from secrets"
        else
            echo "No Tailscale auth key provided - manual authentication will be required"
        fi
        
        # Run container-friendly build (no loop devices needed)
        ./build-soulbox-containerized.sh --version "$VERSION" --clean
        
        # Create artifacts directory and copy all formats
        mkdir -p artifacts
        if [ -f "soulbox-v"*".img" ]; then
            # Copy IMG file and archives with checksums
            cp soulbox-v*.img artifacts/ 2>/dev/null || true
            cp soulbox-v*.img.tar.gz artifacts/ 2>/dev/null || true
            cp soulbox-v*.sha256 artifacts/ 2>/dev/null || true
            
            echo "SoulBox image created successfully!"
            ls -lh artifacts/
            
            # Store version for next step
            echo "$VERSION" > artifacts/version.txt
            echo "VERSION=$VERSION" >> $GITHUB_ENV
        else
            echo "Build failed - no image file found"
            exit 1
        fi
        
        echo "SoulBox build complete - ready to flash and deploy!"

    - name: Create Gitea Release
      if: success()
      env:
        GITOKEN: ${{ secrets.GITOKEN }}
      run: |
        echo "=== Creating Gitea Release ==="
        
        # Check if we have the version and image files
        if [ -f "artifacts/version.txt" ]; then
            VERSION=$(cat artifacts/version.txt)
            echo "Creating release for version: $VERSION"
            
            # Find the image and checksum files
            IMAGE_FILE=$(find artifacts/ -name "soulbox-v*.img" | head -1)
            CHECKSUM_FILE=$(find artifacts/ -name "soulbox-v*.img.sha256" | head -1)
            
            if [ -n "$IMAGE_FILE" ] && [ -n "$CHECKSUM_FILE" ]; then
                echo "Image file: $IMAGE_FILE"
                echo "Checksum file: $CHECKSUM_FILE"
                
                # Create Gitea release with image files
                if ./scripts/gitea-version-manager.sh create-release "$VERSION" "$IMAGE_FILE" "$CHECKSUM_FILE"; then
                    echo "‚úÖ Gitea release created successfully!"
                    echo "üîó Release URL: https://gitea.osiris-adelie.ts.net/reaper/soulbox/releases/tag/$VERSION"
                else
                    echo "‚ö†Ô∏è  Failed to create Gitea release, but build succeeded"
                fi
            else
                echo "‚ö†Ô∏è  Image or checksum files not found for release creation"
            fi
        else
            echo "‚ö†Ô∏è  Version file not found, skipping release creation"
        fi

    - name: Upload SoulBox Image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: soulbox-wisp-image
        path: artifacts/
        retention-days: 30

    - name: Upload Build Logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-logs
        path: |
          *.log
          build/
        retention-days: 7
        
    - name: Build Summary
      if: success()
      run: |
        echo "SoulBox Will-o'-Wisp Media Center Build Complete!"
        echo "================================================"
        echo ""
        echo "Image created:"
        ls -la artifacts/
        echo ""
        echo "Features included:"
        echo "   - Kodi Media Center (auto-start with splash)"
        echo "   - Tailscale VPN integration"
        echo "   - Raspberry Pi 5 optimizations"
        echo "   - Complete systemd service configuration"
        echo "   - SSH enabled with default credentials"
        echo "   - Pre-configured media directories"
        echo "   - Will-o'-wisp branding and theming"
        echo ""
        echo "Ready to deploy:"
        echo "   1. Download the .img file from artifacts"
        echo "   2. Flash to SD card (8GB+ recommended)"
        echo "   3. Boot on Raspberry Pi 5"
        echo "   4. First boot will complete setup automatically"
        echo ""
        echo "Default credentials:"
        echo "   - soulbox:soulbox (recommended user)"
        echo "   - pi:soulbox (compatibility)"
        echo "   - root:soulbox (admin access)"
        echo ""
        echo "The blue flame burns bright and awaits deployment!"

