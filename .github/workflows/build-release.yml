name: Build SoulBox Will-o'-Wisp Media Center

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-components:
    runs-on: ubuntu-latest
    # NOTE: This job uses container-friendly build approach (no loop devices needed)
    # Based on LibreELEC's methodology using mtools and e2tools
    
    steps:
    - name: Manual repository checkout
      run: |
        echo "=== Manual Git Checkout ==="
        cd /tmp
        git clone http://192.168.176.113:3000/reaper/soulbox.git soulbox-build
        cd soulbox-build
        echo "Repository cloned successfully"
        cp -r . $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE
        echo "Files in workspace:"
        ls -la
      
    - name: Install build dependencies
      run: |
        echo "=== Installing Dependencies ==="
        sudo apt-get update -q
        sudo apt-get install -y --no-install-recommends \
          parted \
          mtools \
          e2tools \
          dosfstools \
          e2fsprogs \
          wget \
          curl \
          xz-utils \
          coreutils
        echo "Dependencies installed successfully"
    
    - name: Verify build tools
      run: |
        echo "=== Verifying Build Tools ==="
        # Check essential tools for container-friendly image building
        which curl && echo "curl: OK" || echo "curl: MISSING"
        which xz && echo "xz: OK" || echo "xz: MISSING" 
        which parted && echo "parted: OK" || echo "parted: MISSING"
        which mcopy && echo "mtools: OK" || echo "mtools: MISSING"
        which e2cp && echo "e2tools: OK" || echo "e2tools: MISSING"
        which mke2fs && echo "e2fsprogs: OK" || echo "e2fsprogs: MISSING"
        which dd && echo "dd: OK" || echo "dd: MISSING"
        echo "Build tools verification complete"
        
    - name: Free up disk space
      run: |
        echo "=== Disk Space Management ==="
        df -h
        sudo apt-get clean
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost /var/lib/apt/lists/* 2>/dev/null || true
        echo "Disk space after cleanup:"
        df -h
    
    - name: Build SoulBox Media Center Image
      run: |
        echo "=== Building SoulBox Will-o'-Wisp Media Center ==="
        set -e
        set -x
        
        # Get version for build
        if [ -f "scripts/version-manager.sh" ]; then
            VERSION=$(./scripts/version-manager.sh auto 2>/dev/null | tail -1 || echo "v0.1.0")
        else
            VERSION="v0.1.0"
        fi
        
        echo "Building SoulBox $VERSION - Complete Media Center with Kodi & Tailscale"
        
        # Run container-friendly build (no loop devices needed)
        ./build-soulbox-containerized.sh --version "$VERSION" --clean
        
        # Create artifacts directory and copy result
        mkdir -p artifacts
        if [ -f "soulbox-v"*".img" ]; then
            cp soulbox-v*.img artifacts/
            cp soulbox-v*.img.sha256 artifacts/
            echo "SoulBox image created successfully!"
            ls -lh artifacts/
        else
            echo "Build failed - no image file found"
            exit 1
        fi
        
        echo "SoulBox build complete - ready to flash and deploy!"

    - name: Upload SoulBox Image
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: soulbox-wisp-image
        path: artifacts/
        retention-days: 30

    - name: Upload Build Logs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: build-logs
        path: |
          *.log
          build/
        retention-days: 7
        
    - name: Build Summary
      if: success()
      run: |
        echo "SoulBox Will-o'-Wisp Media Center Build Complete!"
        echo "================================================"
        echo ""
        echo "Image created:"
        ls -la artifacts/
        echo ""
        echo "Features included:"
        echo "   - Kodi Media Center (auto-start with splash)"
        echo "   - Tailscale VPN integration"
        echo "   - Raspberry Pi 5 optimizations"
        echo "   - Complete systemd service configuration"
        echo "   - SSH enabled with default credentials"
        echo "   - Pre-configured media directories"
        echo "   - Will-o'-wisp branding and theming"
        echo ""
        echo "Ready to deploy:"
        echo "   1. Download the .img file from artifacts"
        echo "   2. Flash to SD card (8GB+ recommended)"
        echo "   3. Boot on Raspberry Pi 5"
        echo "   4. First boot will complete setup automatically"
        echo ""
        echo "Default credentials:"
        echo "   - soulbox:soulbox (recommended user)"
        echo "   - pi:soulbox (compatibility)"
        echo "   - root:soulbox (admin access)"
        echo ""
        echo "The blue flame burns bright and awaits deployment!"

