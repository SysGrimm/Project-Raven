# PATCH: Fix for e2cp extraction failures in build-soulbox-containerized.sh
# 
# PROBLEM: The script uses 'e2cp -r' which doesn't exist, causing all Pi OS extractions to fail
# SOLUTION: Replace with correct e2tools syntax using e2ls + e2cp

# Add this helper function after line 260 (before copy_and_customize_filesystems):

extract_directory_contents() {
    local source_img="$1"
    local source_dir="$2"
    local target_dir="$3"
    local max_files="${4:-1000}"
    
    # Create target directory
    mkdir -p "$target_dir"
    
    # Get directory listing
    local items
    items=$(e2ls "$source_img:$source_dir" 2>/dev/null || echo "")
    
    if [[ -z "$items" ]]; then
        return 1
    fi
    
    local files_copied=0
    local total_processed=0
    
    # Process each item
    while IFS= read -r item; do
        [[ -z "$item" ]] && continue
        [[ "$item" =~ ^\.\.?/?$ ]] && continue  # Skip . and ..
        
        # Limit extraction to prevent runaway copying
        if [[ $total_processed -ge $max_files ]]; then
            echo "    Reached file limit ($max_files) for $source_dir"
            break
        fi
        
        local source_item="$source_dir/$item"
        local target_item="$target_dir/$item"
        
        # Check if it's a directory (ends with /)
        if [[ "$item" =~ /$ ]]; then
            # Directory - recurse into it (limited depth)
            local clean_name="${item%/}"
            local sub_source="$source_dir/$clean_name"
            local sub_target="$target_dir/$clean_name"
            
            # Only recurse 3 levels deep to avoid excessive copying
            if [[ $(echo "$source_dir" | tr -cd '/' | wc -c) -lt 3 ]]; then
                extract_directory_contents "$source_img" "$sub_source" "$sub_target" 100
            fi
        else
            # File - copy it
            if e2cp "$source_img:$source_item" "$target_item" 2>/dev/null; then
                files_copied=$((files_copied + 1))
            fi
        fi
        
        total_processed=$((total_processed + 1))
    done <<< "$items"
    
    echo "    $source_dir: $files_copied files extracted"
    return 0
}

# REPLACE the lines 785-868 in the original script with this corrected logic:

        # FIXED: Use proper e2tools syntax instead of non-existent 'e2cp -r'
        log_info "Extracting essential system directory: $sys_dir (max 1000 files)"
        
        local target_dir="$pi_extract_dir$sys_dir"
        
        # Use our robust extraction function with file limits
        if extract_directory_contents "$pi_root" "$sys_dir" "$target_dir" 1000; then
            total_extracted=$((total_extracted + 1))
            log_success "Extracted system directory: $sys_dir"
        else
            log_warning "Failed to extract system directory: $sys_dir"
            total_failed=$((total_failed + 1))
            
            # Create minimal directory structure
            mkdir -p "$target_dir"
            
            # For critical directories, try individual file extraction
            if [[ "$sys_dir" == "/bin" ]]; then
                log_info "Attempting to extract critical /bin files individually..."
                local bin_files=("bash" "sh" "ls" "cp" "mv" "rm" "mount" "umount" "cat" "grep" "sed")
                for bin_file in "${bin_files[@]}"; do
                    if e2cp "$pi_root:/bin/$bin_file" "$pi_extract_dir/bin/$bin_file" 2>/dev/null; then
                        log_info "✓ /bin/$bin_file"
                    else
                        log_warning "✗ /bin/$bin_file"
                    fi
                done
            elif [[ "$sys_dir" == "/sbin" ]]; then
                log_info "Attempting to extract critical /sbin files individually..."
                local sbin_files=("init" "fsck" "blkid" "mke2fs")
                for sbin_file in "${sbin_files[@]}"; do
                    if e2cp "$pi_root:/sbin/$sbin_file" "$pi_extract_dir/sbin/$sbin_file" 2>/dev/null; then
                        log_info "✓ /sbin/$sbin_file"
                    else
                        log_warning "✗ /sbin/$sbin_file"
                    fi
                done
            elif [[ "$sys_dir" == "/lib/modules" ]]; then
                log_info "Attempting kernel module extraction using kernel detection..."
                mkdir -p "$pi_extract_dir/lib/modules"
                
                # Find kernel versions
                local kernel_versions
                kernel_versions=$(e2ls "$pi_root:/lib/modules" 2>/dev/null | grep -E '^[0-9]+\.[0-9]+\.[0-9]+' | head -3)
                
                if [[ -n "$kernel_versions" ]]; then
                    while IFS= read -r kernel_ver; do
                        [[ -z "$kernel_ver" ]] && continue
                        
                        # Remove trailing / if present
                        kernel_ver="${kernel_ver%/}"
                        
                        log_info "Extracting kernel modules for: $kernel_ver"
                        if extract_directory_contents "$pi_root" "/lib/modules/$kernel_ver" "$pi_extract_dir/lib/modules/$kernel_ver" 1000; then
                            log_success "✓ /lib/modules/$kernel_ver"
                        else
                            log_warning "✗ /lib/modules/$kernel_ver"
                        fi
                    done <<< "$kernel_versions"
                else
                    log_error "Could not determine kernel version for module extraction"
                fi
            elif [[ "$sys_dir" == "/lib" ]]; then
                log_info "Attempting to extract critical /lib components individually..."
                mkdir -p "$pi_extract_dir/lib"
                
                # Extract the dynamic linker (absolutely critical)
                if e2cp "$pi_root:/lib/ld-linux-aarch64.so.1" "$pi_extract_dir/lib/ld-linux-aarch64.so.1" 2>/dev/null; then
                    log_info "✓ ld-linux-aarch64.so.1"
                else
                    log_warning "✗ ld-linux-aarch64.so.1"
                fi
                
                # Extract firmware
                if extract_directory_contents "$pi_root" "/lib/firmware" "$pi_extract_dir/lib/firmware" 500; then
                    log_success "✓ /lib/firmware"
                else
                    log_warning "✗ /lib/firmware"
                    mkdir -p "$pi_extract_dir/lib/firmware"
                fi
                
                # Extract systemd components
                if extract_directory_contents "$pi_root" "/lib/systemd" "$pi_extract_dir/lib/systemd" 500; then
                    log_success "✓ /lib/systemd"
                else
                    log_warning "✗ /lib/systemd"
                    mkdir -p "$pi_extract_dir/lib/systemd"
                fi
                
                # Extract architecture-specific libraries
                if extract_directory_contents "$pi_root" "/lib/aarch64-linux-gnu" "$pi_extract_dir/lib/aarch64-linux-gnu" 1000; then
                    log_success "✓ /lib/aarch64-linux-gnu"
                else
                    log_warning "✗ /lib/aarch64-linux-gnu"
                    mkdir -p "$pi_extract_dir/lib/aarch64-linux-gnu"
                fi
            fi
        fi

# SUMMARY OF CHANGES:
# 1. Remove lines 785-786 that use 'e2cp -r' (doesn't exist)
# 2. Add the extract_directory_contents() helper function
# 3. Replace the broken recursive extraction with proper e2ls + e2cp logic
# 4. Add file limits to prevent container space issues
# 5. Maintain all existing fallback and error handling logic

# This should resolve the "0 directories succeeded, 12 failed" issue
